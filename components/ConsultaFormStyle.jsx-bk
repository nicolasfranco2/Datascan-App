  import AsyncStorage from '@react-native-async-storage/async-storage';
import { Picker } from '@react-native-picker/picker';
import { useNavigation } from '@react-navigation/native';
import React, { useEffect, useState } from 'react';
import { Alert, Button, ScrollView, StyleSheet, Text, TextInput, View } from 'react-native';


  const AccesoMenu = () => {
    const [formularios, setFormularios] = useState([]);
    const [selectedValue, setSelectedValue] = useState('');
    const [formularioAttributes, setFormularioAttributes] = useState(null);
    const [loading, setLoading] = useState(false); // Add loading state
    const [resultados, setResultados] = useState([]); // To store search results
    const [atributoConditions, setAtributoConditions] = useState({});
    const navigation = useNavigation();

    useEffect(() => {
      const fetchFormularios = async () => {
        try {
          const token = await AsyncStorage.getItem('authToken');

          if (!token) {
            return Alert.alert('Error', 'Token no disponible. Inicie sesión nuevamente.');
          }

          const response = await fetch(`http://192.168.11.161:2025/formularios?token=${token}`);
          const data = await response.json();

          if (data.formularios) {
            setFormularios(
              data.formularios.map((formulario) => ({
                id: formulario.id,
                nombre: formulario.nombre,
              }))
            );
          } else {
            Alert.alert('Error', 'No se encontraron formularios');
          }
        } catch (error) {
          console.error('Error al cargar los formularios:', error);
          Alert.alert('Error', 'Hubo un problema al cargar los formularios.');
        }
      };

      fetchFormularios();
    }, []);

    const fetchFormularioAttributes = async (formularioId) => {
      try {
        const token = await AsyncStorage.getItem('authToken');
        if (!token) {
          return Alert.alert('Error', 'Token no disponible. Inicie sesión nuevamente.');
        }

        const response = await fetch(
          `http://192.168.11.161:2025/formulario/${formularioId}?token=${token}`
        );
        const data = await response.json();

        if (data) {
          setFormularioAttributes(data);
          // Inicializamos el estado para almacenar las condiciones por atributo
          const initialConditions = data.atributos.reduce((acc, atributo) => {
            acc[atributo.id] = { condicion: 'ninguno', valor: '' }; // "igual" es el valor inicial
            return acc;
          }, {});
          setAtributoConditions(initialConditions);
        } else {
          Alert.alert('Error', 'No se encontraron los atributos del formulario');
        }
      } catch (error) {
        console.error('Error al cargar los atributos del formulario:', error);
        Alert.alert('Error', 'Hubo un problema al cargar los atributos.');
      }
    };

    const handleValueChange = (itemValue) => {
      setSelectedValue(itemValue);
      if (itemValue) {
        fetchFormularioAttributes(itemValue);
      } else {
        setFormularioAttributes(null);
        setAtributoConditions({});
      }
    };

    const handleConditionChange = (atributoId, condicion) => {
      setAtributoConditions((prevState) => ({
        ...prevState,
        [atributoId]: { ...prevState[atributoId], condicion },
      }));
    };

    const handleValueInputChange = (atributoId, value) => {
      setAtributoConditions((prevState) => ({
        ...prevState,
        [atributoId]: { ...prevState[atributoId], valor: value },
      }));
    };

   const handleButtonPress = async () => {
  // Primero validamos si el formulario está seleccionado
  if (!selectedValue) {
    return Alert.alert('Error', 'Seleccione un formulario antes de consultar.');
  }

  // Verificamos que el usuario haya configurado al menos un criterio válido
  const criterios = Object.entries(atributoConditions)
    .map(([atributoId, condition]) => {
      // Si no se selecciona ninguna condición o el valor está vacío, mostramos un mensaje de error
      if (condition.condicion !== 'ninguno' && (!condition.valor || condition.valor.trim() === '')) {
        Alert.alert('Error', `Debe ingresar un valor para el atributo: ${formularioAttributes?.atributos?.find(
          (atributo) => atributo.id === parseInt(atributoId, 10)
        )?.nombre || 'Atributo desconocido'}`);
        return null; // Si no tiene valor, no agregamos el criterio
      }

      // Si el valor está presente pero la condición es "ninguno", mostramos un mensaje de advertencia
      if (condition.valor && condition.condicion === 'ninguno') {
        Alert.alert('Error', `Debe seleccionar una condición para el atributo: ${formularioAttributes?.atributos?.find(
          (atributo) => atributo.id === parseInt(atributoId, 10)
        )?.nombre || 'Atributo desconocido'}`);
        return null; // Si tiene valor pero no tiene condición, no agregamos el criterio
      }

      // Si el valor y la condición son válidos, creamos el criterio
      return {
        condicion: condition.condicion.toUpperCase(),
        valor1: condition.valor,
        valor2: '',
        nombreAtributo: formularioAttributes?.atributos?.find(
          (atributo) => atributo.id === parseInt(atributoId, 10)
        )?.nombre || '',
      };
    })
    .filter((criterio) => criterio !== null); // Filtramos los criterios nulos (es decir, los que no eran válidos)

  // Si no se configuraron criterios válidos, mostramos un mensaje de error
  if (criterios.length === 0) {
    return Alert.alert('Error', 'Debe configurar al menos un criterio de búsqueda válido.');
  }

  try {
    const token = await AsyncStorage.getItem('authToken');
    if (!token || token.trim() === '') {
      return Alert.alert('Error', 'Token no disponible. Inicie sesión nuevamente.');
    }

    // Construir el cuerpo de la solicitud
    const requestBody = new URLSearchParams({
      token,
      idFormulario: selectedValue.toString(),
      criterios: JSON.stringify(criterios), // Solo enviamos criterios válidos
      incluirAtributos: 'true',
    });

    console.log('Token:', token);
    console.log('Request Body:', requestBody.toString());

    // Realizar la solicitud a la API
    const response = await fetch(
      `http://192.168.11.161:8080/datascan3-web/rest/busqueda.json`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: requestBody.toString(),
      }
    );

    const contentType = response.headers.get('content-type');
    if (!contentType || !contentType.includes('application/json')) {
      const text = await response.text();
      console.error('Respuesta no válida:', text);
      return Alert.alert('Error', 'El servidor no devolvió un JSON válido.');
    }

    const data = await response.json().catch(() => ({}));

    if (response.ok) {
      // Procesar los datos obtenidos de la API
      const resultadosFiltrados = data?.resultado?.documentos?.items?.map((item) => ({
        nombreArchivo: item.nombreArchivo,
        indexadoPor: item.archivoIndexadoPorUsuario,
        paginasCantidad: item.paginasArchivo,
        fechaIndexado: item.archivoIndexadoEnFecha,
        formulario: item.formulario || 'No disponible', // Agregar el formulario
        atributos: item.valoresAtributos.map((atributo) => ({
          nombre: atributo.nombre,
          valor: atributo.valor,
        })),
      })) || [];

      Alert.alert('Éxito', 'Consulta realizada correctamente.');
      navigation.navigate('Resultados', { resultados: resultadosFiltrados });
    } else {
      const errorMessage = data?.message || 'Hubo un problema con la consulta.';
      console.error('Error en la consulta:', data);
      Alert.alert('Error', errorMessage);
    }
  } catch (error) {
    console.error('Error al realizar la consulta:', error);
    Alert.alert('Error', 'Ocurrió un problema al conectar con la API.');
  }
};


    return (
  <View style={{ flex: 1 }}>
  <ScrollView contentContainerStyle={{ flexGrow: 1, paddingBottom: 100 }}>
    <Text style={styles.label}>Selecciona un formulario:</Text>
    <Picker selectedValue={selectedValue} onValueChange={handleValueChange} style={styles.picker}>
      <Picker.Item label="--Ninguno--" value="" />
      {formularios.map((formulario) => (
        <Picker.Item key={formulario.id} label={formulario.nombre} value={formulario.id} />
      ))}
    </Picker>

    {formularioAttributes && (
      <View style={styles.attributesContainer}>
        <Text style={styles.attributesTitle}>Atributos del formulario:</Text>
        {formularioAttributes.atributos.map((atributo) => (
          <View key={atributo.id} style={styles.attributeContainer}>
            <Text style={styles.attribute}>{atributo.nombre}</Text>
            <Picker
              selectedValue={atributoConditions[atributo.id]?.condicion}
              onValueChange={(value) => handleConditionChange(atributo.id, value)}
              style={styles.picker}
            >
              <Picker.Item label="--" value="ninguno" />
              <Picker.Item label="IGUAL" value="igual" />
              <Picker.Item label="DISTINTO" value="distinto" />
              <Picker.Item label="CONTIENE" value="contiene" />
            </Picker>

            {/* Renderizamos el TextInput solo si la condición es distinta de "ninguno" */}
            {atributoConditions[atributo.id]?.condicion !== 'ninguno' && (
              <TextInput
                style={styles.input}
                placeholder="Ingrese valor..."
                value={atributoConditions[atributo.id]?.valor}
                onChangeText={(text) => handleValueInputChange(atributo.id, text)}
              />
            )}
          </View>
        ))}
      </View>
    )}
  </ScrollView>
  <View style={styles.buttonContainer}>
    <Button title="Consultar" onPress={handleButtonPress} />
  </View>
</View>

)};
  const styles = StyleSheet.create({
    container: {
      flex: 1,
     },
     label: {
      fontSize: 20,
      marginBottom: 10,
      alignSelf: 'center', // Alinea al principio del contenedor
      marginLeft: 20, // Crea un espacio desde el borde izquierdo
      marginTop: 22,
      fontWeight: 'bold', // Hace que el texto sea negrita
      
    },
    picker: {
      marginBottom: 20, // Espaciado inferior
      width: '80%',
      alignSelf: 'center', // Hace que el Picker ocupe el ancho completo del contenedor
      height: 50, // Ajusta la altura del Picker
      borderWidth: 1, // Agrega un borde para que sea más visible
      borderColor: 'gray', // Color del borde
      borderRadius: 5, // Bordes redondeados
      backgroundColor: '#f9f9f9', // Fondo claro para un mejor contraste
      fontSize: 16, // Tamaño de la fuente
      color: 'black', // Color del texto dentro del Picker
      paddingHorizontal: 10, // Espaciado interno
    },
    
    attributesContainer: {
      marginVertical: 10,
      paddingLeft: 20,
    },
    attributesTitle: {
      fontSize: 18,
      fontWeight: 'bold',
      marginBottom: 10,
    },
    attribute: {
      fontSize: 16,
      marginBottom: 5,
    },
    attributeContainer: {
      marginBottom: 10,
    },
    loadingText: {
      fontSize: 16,
      color: 'gray',
    },
   
    input: {
      height: 40,
      width: '80%',
      borderColor: '#007acc', // Azul más oscuro para destacar
      borderWidth: 2, // Borde más grueso para indicar interactividad
      alignSelf: 'center',
      borderRadius: 5,
      backgroundColor: '#ffffff', // Blanco puro para enfatizar la entrada de texto
      fontSize: 14,
      color: '#333333',
      paddingHorizontal: 10,
    },
    
   
    /* input: {
      height: 40, // Ajusta la altura
      width: '80%', // Ajusta el ancho, puede ser porcentaje o valor absoluto
      borderColor: 'gray',
      borderWidth: 1,
      //marginTop: 10,
      //paddingHorizontal: 15, // Espacio interno en los lados
      alignSelf: 'center', // Centra horizontalmente el input dentro del contenedor
      //borderRadius: 5, // Opcional: agrega esquinas redondeadas
    },
    */
    buttonContainer: {
      padding: 10,
      backgroundColor: '#f5f5f5',
    },
    button: {
      padding: 10,
      backgroundColor: '#4CAF50',
      borderRadius: 5,
      margin: 5,
    },
    buttonText: {
      color: 'white',
      fontSize: 16,
    },
  });

  export default AccesoMenu;
